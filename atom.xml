<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Keep Clam And Carry On！</title>
  
  <subtitle>gwbiubiubiu</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-17T11:57:40.762Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Gao Wei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux命令大全</title>
    <link href="http://yoursite.com/2019/12/17/Linux%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <id>http://yoursite.com/2019/12/17/Linux%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</id>
    <published>2019-12-17T11:17:34.000Z</published>
    <updated>2019-12-17T11:57:40.762Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://q2fz8l8jw.bkt.clouddn.com/blog/20191217/eiwfh4t4HxYl.jpg?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://q2fz8l8jw.bkt.clouddn.com/blog/20191217/eiwfh4t4HxYl.jpg?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Ecilpse快捷键大全</title>
    <link href="http://yoursite.com/2019/12/17/Ecilpse%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8/"/>
    <id>http://yoursite.com/2019/12/17/Ecilpse%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8/</id>
    <published>2019-12-17T11:17:05.000Z</published>
    <updated>2019-12-17T12:00:04.025Z</updated>
    
    <content type="html"><![CDATA[<img src="http://q2fz8l8jw.bkt.clouddn.com/blog/20191217/HsjjHdn4BKlc.jpg" alt="mark" style="zoom:150%;">]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;http://q2fz8l8jw.bkt.clouddn.com/blog/20191217/HsjjHdn4BKlc.jpg&quot; alt=&quot;mark&quot; style=&quot;zoom:150%;&quot;&gt;
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Eclipse" scheme="http://yoursite.com/tags/Eclipse/"/>
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法总结</title>
    <link href="http://yoursite.com/2019/12/17/Markdown%E4%BD%BF%E7%94%A8%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/12/17/Markdown%E4%BD%BF%E7%94%A8%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</id>
    <published>2019-12-17T01:37:55.000Z</published>
    <updated>2019-12-17T11:52:46.701Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://q2fz8l8jw.bkt.clouddn.com/blog/20191217/wEYEHBJMNkFg.jpg?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://q2fz8l8jw.bkt.clouddn.com/blog/20191217/wEYEHBJMNkFg.jpg?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="个人博客" scheme="http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Markdown" scheme="http://yoursite.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客系统搭建——经验总结</title>
    <link href="http://yoursite.com/2019/12/17/Hexo+Github%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/12/17/Hexo+Github%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/</id>
    <published>2019-12-17T01:34:09.000Z</published>
    <updated>2019-12-17T11:56:14.088Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://q2fz8l8jw.bkt.clouddn.com/blog/20191217/h1vQm1zqT88I.jpg?imageslim" alt="mark"></p><a id="more"></a><h1 id="Hexo博客系统搭建——经验总结"><a href="#Hexo博客系统搭建——经验总结" class="headerlink" title="Hexo博客系统搭建——经验总结"></a>Hexo博客系统搭建——经验总结</h1><p>Hexo是一个基于node.js制作的一个轻量静态博客工具，有很多的主题可供定制化，对中文用户也很友好。</p><p>主页：<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">https://hexo.io/zh-cn/</a></p><p><img src="http://q2fz8l8jw.bkt.clouddn.com/blog/20191216/NLBzdnlHBqOC.png?imageslim" alt="mark"></p><p>下面我们就一起开始用Hexo来搭建属于自己的个人博客把。</p><p>【注】笔者用的是Windows系统，所以大部分操作是在cmd上完成的，如果使用Mac或者Linux应该大同小异，就不再赘述了。</p><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>因为Hexo是基于Node.js 开发的，所以肯定是需要安装node.js的，这个直接去官网下载安装包就行，安装后可以输入以下命令查看版本号，用于验证自己是否正确安装。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p><img src="http://q2fz8l8jw.bkt.clouddn.com/blog/20191216/HT6PTdeCeeEd.png?imageslim" alt="mark"></p><h2 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h2><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://q2fz8l8jw.bkt.clouddn.com/blog/20191217/h1vQm1zqT88I.jpg?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="个人博客" scheme="http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>使用七牛云搭建个人免费图床</title>
    <link href="http://yoursite.com/2019/12/17/%E4%BD%BF%E7%94%A8%E4%B8%83%E7%89%9B%E4%BA%91%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/"/>
    <id>http://yoursite.com/2019/12/17/%E4%BD%BF%E7%94%A8%E4%B8%83%E7%89%9B%E4%BA%91%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/</id>
    <published>2019-12-17T01:34:09.000Z</published>
    <updated>2019-12-17T12:06:24.107Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://q2fz8l8jw.bkt.clouddn.com/blog/20191217/gsPut9AvGaRr.jpg" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://q2fz8l8jw.bkt.clouddn.com/blog/20191217/gsPut9AvGaRr.jpg&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="个人博客" scheme="http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="ECS" scheme="http://yoursite.com/tags/ECS/"/>
    
  </entry>
  
  <entry>
    <title>Java实战——客户管理软件项目</title>
    <link href="http://yoursite.com/2019/12/12/Java%E5%AE%9E%E6%88%98%E2%80%94%E2%80%94%E5%AE%A2%E6%88%B7%E7%AE%A1%E7%90%86%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yoursite.com/2019/12/12/Java%E5%AE%9E%E6%88%98%E2%80%94%E2%80%94%E5%AE%A2%E6%88%B7%E7%AE%A1%E7%90%86%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE/</id>
    <published>2019-12-12T07:28:54.793Z</published>
    <updated>2019-12-13T09:12:06.741Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/12/12/Java%E5%AE%9E%E6%88%98%E2%80%94%E2%80%94%E5%AE%A2%E6%88%B7%E7%AE%A1%E7%90%86%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE/v2-7f034407886db6c0c28dd4f1d096643d_r.jpg" alt="preview"></p><a id="more"></a> <p><em>写在最前</em></p><p><em>经过了一段时间的学习，下面通过一个简单客户管理软件项目复习一下学过的知识点。</em></p><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ol><li>模拟实现一个基于文本界面的《客户信息管理软件》</li><li>进一步掌握编程技巧和调试技巧，熟悉面向对象编程</li><li>主要涉及以下知识点：</li></ol><ul><li>类结构的使用：属性、方法及构造器</li><li>对象的创建与使用</li><li>类的封装性</li><li>声明和使用数组</li><li>数组的插入、删除和替换</li><li>关键字的使用：this</li></ul><h3 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h3><p>模拟实现基于文本界面的《客户信息管理软件》。</p><p>该软件能够实现对客户对象的插入、修改和删除（用数组实现），并能够打印客户明细表。</p><h3 id="软件设计结构"><a href="#软件设计结构" class="headerlink" title="软件设计结构"></a>软件设计结构</h3><p><img src="/2019/12/12/Java%E5%AE%9E%E6%88%98%E2%80%94%E2%80%94%E5%AE%A2%E6%88%B7%E7%AE%A1%E7%90%86%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE/image-20191213155955285.png" alt></p><ol><li>CustomerView为主模块，负责菜单的显示和处理用户操作</li><li>CustomerList为Customer对象的管理模块，内部用数组管理一组Customer对象，并提供相应的添加、修改、删除和遍历方法，供CustomerView调用</li><li>Customer为实体对象，用来封装客户信息</li></ol><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="1-键盘访问的实现"><a href="#1-键盘访问的实现" class="headerlink" title="1. 键盘访问的实现"></a>1. 键盘访问的实现</h4><p>项目中提供了CMUtility.java类，可用来方便地实现键盘访问。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gaowei.endpoint.util;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">CMUtility工具类：</span></span><br><span class="line"><span class="comment">将不同的功能封装为方法，就是可以直接通过调用方法使用它的功能，而无需考虑具体的功能实现细节。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CMUtility</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">用于界面菜单的选择。该方法读取键盘，如果用户键入’1’-’5’中的任意字符，则方法返回。返回值为用户键入字符。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">readMenuSelection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            String str = readKeyBoard(<span class="number">1</span>, <span class="keyword">false</span>);</span><br><span class="line">            c = str.charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="string">'1'</span> &amp;&amp; c != <span class="string">'2'</span> &amp;&amp; </span><br><span class="line">                c != <span class="string">'3'</span> &amp;&amp; c != <span class="string">'4'</span> &amp;&amp; c != <span class="string">'5'</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">"选择错误，请重新输入："</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">从键盘读取一个字符，并将其作为方法的返回值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">readChar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String str = readKeyBoard(<span class="number">1</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> str.charAt(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">从键盘读取一个字符，并将其作为方法的返回值。</span></span><br><span class="line"><span class="comment">如果用户不输入字符而直接回车，方法将以defaultValue 作为返回值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">readChar</span><span class="params">(<span class="keyword">char</span> defaultValue)</span> </span>&#123;</span><br><span class="line">        String str = readKeyBoard(<span class="number">1</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> (str.length() == <span class="number">0</span>) ? defaultValue : str.charAt(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">从键盘读取一个长度不超过2位的整数，并将其作为方法的返回值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">readInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            String str = readKeyBoard(<span class="number">2</span>, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                n = Integer.parseInt(str);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">                System.out.print(<span class="string">"数字输入错误，请重新输入："</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">从键盘读取一个长度不超过2位的整数，并将其作为方法的返回值。</span></span><br><span class="line"><span class="comment">如果用户不输入字符而直接回车，方法将以defaultValue 作为返回值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">readInt</span><span class="params">(<span class="keyword">int</span> defaultValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            String str = readKeyBoard(<span class="number">2</span>, <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (str.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> defaultValue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                n = Integer.parseInt(str);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">                System.out.print(<span class="string">"数字输入错误，请重新输入："</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">从键盘读取一个长度不超过limit的字符串，并将其作为方法的返回值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readString</span><span class="params">(<span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> readKeyBoard(limit, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">从键盘读取一个长度不超过limit的字符串，并将其作为方法的返回值。</span></span><br><span class="line"><span class="comment">如果用户不输入字符而直接回车，方法将以defaultValue 作为返回值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readString</span><span class="params">(<span class="keyword">int</span> limit, String defaultValue)</span> </span>&#123;</span><br><span class="line">        String str = readKeyBoard(limit, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> str.equals(<span class="string">""</span>)? defaultValue : str;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">用于确认选择的输入。该方法从键盘读取‘Y’或’N’，并将其作为方法的返回值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">readConfirmSelection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            String str = readKeyBoard(<span class="number">1</span>, <span class="keyword">false</span>).toUpperCase();</span><br><span class="line">            c = str.charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'Y'</span> || c == <span class="string">'N'</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(<span class="string">"选择错误，请重新输入："</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">readKeyBoard</span><span class="params">(<span class="keyword">int</span> limit, <span class="keyword">boolean</span> blankReturn)</span> </span>&#123;</span><br><span class="line">        String line = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">            line = scanner.nextLine();</span><br><span class="line">            <span class="keyword">if</span> (line.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (blankReturn) <span class="keyword">return</span> line;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (line.length() &lt; <span class="number">1</span> || line.length() &gt; limit) &#123;</span><br><span class="line">                System.out.print(<span class="string">"输入长度（不大于"</span> + limit + <span class="string">"）错误，请重新输入："</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> line;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-Customer类的设计"><a href="#2-Customer类的设计" class="headerlink" title="2. Customer类的设计"></a>2. Customer类的设计</h4><ul><li><p>按照设计要求编写Customer类，并编译。</p></li><li><p>在Customer 类中临时添加一个main方法中，作为单元测试方法。在方法中创建Customer对象，并调用对象的各个方法，以测试该类是否编写正确。</p></li></ul><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gaowei.endpoint.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: Customer.java  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gaowei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span> com.gaowei.endpoint.bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: Customer为实体类，用来封装客户信息 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019年12月11日</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">String name  ;<span class="comment">//客户姓名</span></span><br><span class="line"><span class="keyword">char</span> gender  ;<span class="comment">//性别</span></span><br><span class="line"><span class="keyword">int</span> age      ;<span class="comment">//年龄</span></span><br><span class="line">String phone ;<span class="comment">//电话号码</span></span><br><span class="line">String email ;<span class="comment">//电子邮箱</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> gender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(<span class="keyword">char</span> gender)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> phone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhone</span><span class="params">(String phone)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.phone = phone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> email;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.email = email;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//super();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(String name, <span class="keyword">char</span> gender, <span class="keyword">int</span> age, String phone, String email)</span> </span>&#123;</span><br><span class="line"><span class="comment">//super();</span></span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.gender = gender;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.phone = phone;</span><br><span class="line"><span class="keyword">this</span>.email = email;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-CustomerList类的设计"><a href="#3-CustomerList类的设计" class="headerlink" title="3. CustomerList类的设计"></a>3. CustomerList类的设计</h4><p><strong>CustomerList</strong>为Customer对象的管理模块，内部使用数组管理一组Customer对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gaowei.endpoint.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.gaowei.endpoint.bean.Customer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: CustomerList.java  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gaowei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span> com.gaowei.endpoint.service</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: CustomerList为Customer对象的管理模块，内部使用数组管理一组Customer对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019年12月11日</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerList</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Customer[] customers; <span class="comment">// 用来保存客户对象的数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> total = <span class="number">0</span>; <span class="comment">// 记录已保存客户对象的数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gaowei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@TODO</span> 测试功能用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="comment">CustomerList cList = new CustomerList(10);</span></span><br><span class="line"><span class="comment">Customer aCustomer = new Customer("aa",'1', 18, "11","11");</span></span><br><span class="line"><span class="comment">Customer bCustomer = new Customer("bb",'1', 18, "11","11");</span></span><br><span class="line"><span class="comment">Customer cCustomer = new Customer("cc",'1', 18, "11","11");</span></span><br><span class="line"><span class="comment">Customer dCustomer = new Customer("dd",'1', 18, "11","11");</span></span><br><span class="line"><span class="comment">Customer eCustomer = new Customer("ee",'1', 18, "11","11");</span></span><br><span class="line"><span class="comment">cList.addCustomer(aCustomer);</span></span><br><span class="line"><span class="comment">cList.addCustomer(bCustomer);</span></span><br><span class="line"><span class="comment">cList.addCustomer(cCustomer);</span></span><br><span class="line"><span class="comment">cList.addCustomer(dCustomer);</span></span><br><span class="line"><span class="comment">cList.addCustomer(eCustomer);</span></span><br><span class="line"><span class="comment">Customer[] cust = cList.getAllCustomers();</span></span><br><span class="line"><span class="comment">System.out.println("加入成员后：");</span></span><br><span class="line"><span class="comment">System.out.println(cList.getTotal());</span></span><br><span class="line"><span class="comment">for (int i = 0; i &lt; cust.length; i++) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(cust[i].getName());</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">cList.deleteCustomer(2);</span></span><br><span class="line"><span class="comment">cList.deleteCustomer(1);</span></span><br><span class="line"><span class="comment">cust = cList.getAllCustomers();</span></span><br><span class="line"><span class="comment">System.out.println("删去成员后：");</span></span><br><span class="line"><span class="comment">System.out.println(cList.getTotal());</span></span><br><span class="line"><span class="comment">for (int i = 0; i &lt; cust.length; i++) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(cust[i].getName());</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">cList.replaceCustomer(1, aCustomer);</span></span><br><span class="line"><span class="comment">cust = cList.getAllCustomers();</span></span><br><span class="line"><span class="comment">System.out.println("替换成员后：");</span></span><br><span class="line"><span class="comment">System.out.println(cList.getTotal());</span></span><br><span class="line"><span class="comment">for (int i = 0; i &lt; cust.length; i++) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(cust[i].getName());</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Customer fCustomer = new Customer();  </span></span><br><span class="line"><span class="comment">fCustomer = cList.getCustomer(2);</span></span><br><span class="line"><span class="comment">System.out.println(fCustomer.getName());</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@TODO</span> 用途：构造器，用来初始化customers数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> totalCustomer: 指定customers数组的最大空间</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CustomerList</span><span class="params">(<span class="keyword">int</span> totalCustomer)</span> </span>&#123;</span><br><span class="line">customers = <span class="keyword">new</span> Customer[totalCustomer];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@TODO</span> 将参数customer添加到数组中最后一个客户对象记录之后</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> customer 指定要添加的客户对象 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 添加成功返回true；false表示数组已满，无法添加</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(total == customers.length) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">customers[total] = customer;</span><br><span class="line">total++;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@TODO</span> 用参数customer替换数组中由index指定的对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 指定所替换对象在数组中的位置，从0开始</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cust 指定替换的新客户对象 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 替换成功返回true；false表示索引无效，无法替换</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">replaceCustomer</span><span class="params">(<span class="keyword">int</span> index, Customer cust)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= total) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">customers[index] = cust;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@TODO</span> 从数组中删除参数index指定索引位置的客户对象记录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index指定所删除对象在数组中的索引位置，从0开始</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 删除成功返回true；false表示索引无效，无法删除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteCustomer</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= total) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = index; i &lt; total; i++) &#123;</span><br><span class="line">customers[i] = customers[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">total--;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@TODO</span> 返回数组中记录的所有客户对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Customer[] 数组中包含了当前所有客户对象，该数组长度与对象个数相同</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Customer[] getAllCustomers() &#123;</span><br><span class="line">Customer[] cust = <span class="keyword">new</span> Customer[total];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; total; i++) &#123;</span><br><span class="line">cust[i] = customers[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cust;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@TODO</span> 返回参数index指定索引位置的客户对象记录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index指定所要获取的客户在数组中的索引位置，从0开始</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 封装了客户信息的Customer对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Customer <span class="title">getCustomer</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">customer = customers[index];</span><br><span class="line"><span class="keyword">return</span> customer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-CustomerView类的设计"><a href="#4-CustomerView类的设计" class="headerlink" title="4. CustomerView类的设计"></a>4. CustomerView类的设计</h4><p><strong>CustomerView</strong>为主模块，负责菜单的显示和处理用户操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gaowei.endpoint.ui;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.gaowei.endpoint.service.CustomerList;</span><br><span class="line"><span class="keyword">import</span> com.gaowei.endpoint.bean.Customer;</span><br><span class="line"><span class="keyword">import</span> com.gaowei.endpoint.util.CMUtility;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: CustomerView.java  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gaowei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span> com.gaowei.endpoint.ui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: CustomerView为主模块，负责菜单的显示和处理用户操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019年12月11日</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerView</span> </span>&#123;</span><br><span class="line">CustomerList customerList = <span class="keyword">new</span> CustomerList(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@todo</span> 显示主菜单，响应用户输入，根据用户操作分别调用</span></span><br><span class="line"><span class="comment"> *    其他相应的成员方法（如addNewCustomer），以完成客户信息处理。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enterMainMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">boolean</span> isFlag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">while</span> (isFlag) &#123;</span><br><span class="line">System.out.println(<span class="string">"\n-----------------客户信息管理软件-----------------\n"</span>);</span><br><span class="line">System.out.println(<span class="string">"                   1 添 加 客 户"</span>);</span><br><span class="line">System.out.println(<span class="string">"                   2 修 改 客 户"</span>);</span><br><span class="line">System.out.println(<span class="string">"                   3 删 除 客 户"</span>);</span><br><span class="line">System.out.println(<span class="string">"                   4 客 户 列 表"</span>);</span><br><span class="line">System.out.println(<span class="string">"                   5 退       出\n"</span>);</span><br><span class="line">System.out.print(<span class="string">"                   请选择(1-5)："</span>);</span><br><span class="line"><span class="keyword">char</span> key = CMUtility.readMenuSelection();</span><br><span class="line"><span class="keyword">switch</span> (key) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'1'</span>:</span><br><span class="line">addNewCustomer();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'2'</span>:</span><br><span class="line">modifyCustomer();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'3'</span>:</span><br><span class="line">deleteCustomer();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'4'</span>:</span><br><span class="line">listAllCustomers();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'5'</span>:</span><br><span class="line">System.out.print(<span class="string">"是否确认退出(Y/N):"</span>);</span><br><span class="line"><span class="keyword">if</span>( CMUtility.readConfirmSelection() == <span class="string">'Y'</span>)</span><br><span class="line">isFlag = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addNewCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"---------------------添加客户---------------------"</span>);</span><br><span class="line">System.out.print(<span class="string">"姓名："</span>);</span><br><span class="line">String name = CMUtility.readString(<span class="number">5</span>);</span><br><span class="line">System.out.print(<span class="string">"性别："</span>);</span><br><span class="line"><span class="keyword">char</span> gender = CMUtility.readChar(<span class="string">'男'</span>);</span><br><span class="line">System.out.print(<span class="string">"年龄："</span>);</span><br><span class="line"><span class="keyword">int</span> age = CMUtility.readInt();</span><br><span class="line">System.out.print(<span class="string">"电话："</span>);</span><br><span class="line">String phone = CMUtility.readString(<span class="number">13</span>);</span><br><span class="line">System.out.print(<span class="string">"邮箱："</span>);</span><br><span class="line">String email = CMUtility.readString(<span class="number">30</span>);</span><br><span class="line">Customer customer = <span class="keyword">new</span> Customer(name, gender, age, phone, email);</span><br><span class="line"><span class="keyword">boolean</span> isFlag = customerList.addCustomer(customer);</span><br><span class="line"><span class="keyword">if</span>(isFlag) &#123;</span><br><span class="line">System.out.println(<span class="string">"---------------------添加完成---------------------"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"----------------记录已满,无法添加-----------------"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">modifyCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"---------------------------修改客户---------------------------"</span>);</span><br><span class="line">System.out.print(<span class="string">"请选择待修改客户编号(-1退出)："</span>);</span><br><span class="line"><span class="keyword">int</span> index = CMUtility.readInt();</span><br><span class="line"><span class="keyword">if</span>(index == -<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">Customer[] customers = customerList.getAllCustomers();</span><br><span class="line">Customer cust = customerList.getCustomer(index-<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(cust == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"无法找到指定客户！"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(<span class="string">"姓名"</span> + <span class="string">'('</span> + customers[index-<span class="number">1</span>].getName() + <span class="string">"):"</span>);</span><br><span class="line">String name = CMUtility.readString(<span class="number">5</span>,customers[index-<span class="number">1</span>].getName());</span><br><span class="line">System.out.print(<span class="string">"性别"</span> + <span class="string">'('</span> + customers[index-<span class="number">1</span>].getGender() + <span class="string">"):"</span>);</span><br><span class="line"><span class="keyword">char</span> gender = CMUtility.readChar(customers[index-<span class="number">1</span>].getGender());</span><br><span class="line">System.out.print(<span class="string">"年龄"</span> + <span class="string">'('</span> + customers[index-<span class="number">1</span>].getAge() + <span class="string">"):"</span>);</span><br><span class="line"><span class="keyword">int</span> age = CMUtility.readInt(customers[index-<span class="number">1</span>].getAge());</span><br><span class="line">System.out.print(<span class="string">"电话"</span> + <span class="string">'('</span> + customers[index-<span class="number">1</span>].getPhone() + <span class="string">"):"</span>);</span><br><span class="line">String phone = CMUtility.readString(<span class="number">13</span>,customers[index-<span class="number">1</span>].getPhone());</span><br><span class="line">System.out.print(<span class="string">"邮箱"</span> + <span class="string">'('</span> + customers[index-<span class="number">1</span>].getEmail() + <span class="string">"):"</span>);</span><br><span class="line">String email = CMUtility.readString(<span class="number">30</span>,customers[index-<span class="number">1</span>].getEmail());</span><br><span class="line">cust = <span class="keyword">new</span> Customer(name, gender, age, phone, email);</span><br><span class="line"><span class="keyword">boolean</span> isflag = customerList.replaceCustomer(index - <span class="number">1</span>, cust);</span><br><span class="line"><span class="keyword">if</span>(isflag) &#123;</span><br><span class="line">System.out.println(<span class="string">"---------------------修改完成---------------------"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"----------无法找到指定客户,修改失败--------------"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deleteCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"---------------------------删除客户---------------------------"</span>);</span><br><span class="line">System.out.print(<span class="string">"请选择待删除客户编号(-1退出)："</span>);</span><br><span class="line"><span class="keyword">int</span> index = CMUtility.readInt();</span><br><span class="line"><span class="keyword">if</span>(index == -<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"确认是否删除(Y/N)："</span>);</span><br><span class="line"><span class="keyword">char</span> key = CMUtility.readConfirmSelection();</span><br><span class="line"><span class="keyword">if</span>(key == <span class="string">'Y'</span>) &#123;</span><br><span class="line"><span class="keyword">boolean</span> isFlag = customerList.deleteCustomer(index - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(isFlag) &#123;</span><br><span class="line">System.out.println(<span class="string">"---------------------------删除完成---------------------------"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"----------无法找到指定客户,删除失败--------------"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">listAllCustomers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"---------------------------客户列表---------------------------"</span>);</span><br><span class="line">Customer[] cust = customerList.getAllCustomers();</span><br><span class="line">System.out.println(<span class="string">"编号\t姓名\t性别\t年龄\t电话\t\t邮箱"</span>);</span><br><span class="line"><span class="keyword">if</span>(cust.length == <span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"客户列表为空！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cust.length; i++) &#123;</span><br><span class="line">System.out.println(i + <span class="number">1</span> + <span class="string">"\t"</span> + cust[i].getName()+ <span class="string">"\t"</span> + cust[i].getGender()+ <span class="string">"\t"</span> + cust[i].getAge()+ <span class="string">"\t"</span> + cust[i].getPhone() + <span class="string">"\t"</span> + <span class="string">"\t"</span> +cust[i].getEmail());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"-------------------------客户列表完成-------------------------"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">CustomerView cView = <span class="keyword">new</span> CustomerView();</span><br><span class="line">cView.enterMainMenu();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="成果展示"><a href="#成果展示" class="headerlink" title="成果展示"></a>成果展示</h3><ul><li>添加客户</li></ul><p><img src="/2019/12/12/Java%E5%AE%9E%E6%88%98%E2%80%94%E2%80%94%E5%AE%A2%E6%88%B7%E7%AE%A1%E7%90%86%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE/image-20191213164623489.png" alt="image-20191213164623489"></p><ul><li>修改客户</li></ul><p><img src="/2019/12/12/Java%E5%AE%9E%E6%88%98%E2%80%94%E2%80%94%E5%AE%A2%E6%88%B7%E7%AE%A1%E7%90%86%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE/image-20191213164804929.png" alt="image-20191213164804929"></p><ul><li>删除客户</li></ul><p><img src="/2019/12/12/Java%E5%AE%9E%E6%88%98%E2%80%94%E2%80%94%E5%AE%A2%E6%88%B7%E7%AE%A1%E7%90%86%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE/image-20191213164822946.png" alt="image-20191213164822946"></p><ul><li>客户列表</li></ul><p><img src="/2019/12/12/Java%E5%AE%9E%E6%88%98%E2%80%94%E2%80%94%E5%AE%A2%E6%88%B7%E7%AE%A1%E7%90%86%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE/image-20191213164856645.png" alt="image-20191213164856645"></p><ul><li>退出</li></ul><p><img src="Java%E5%AE%9E%E6%88%98%E2%80%94%E2%80%94%E5%AE%A2%E6%88%B7%E7%AE%A1%E7%90%86%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE//image-20191213164910327.png" alt="image-20191213164910327"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019/12/12/Java%E5%AE%9E%E6%88%98%E2%80%94%E2%80%94%E5%AE%A2%E6%88%B7%E7%AE%A1%E7%90%86%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE/v2-7f034407886db6c0c28dd4f1d096643d_r.jpg&quot; alt=&quot;preview&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java数据结构与算法——队列</title>
    <link href="http://yoursite.com/2019/12/06/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E9%98%9F%E5%88%97/"/>
    <id>http://yoursite.com/2019/12/06/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E9%98%9F%E5%88%97/</id>
    <published>2019-12-06T07:58:59.163Z</published>
    <updated>2019-12-17T11:28:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://q2fz8l8jw.bkt.clouddn.com/blog/20191217/QraeaDA9hLep.jpg?imageslim" alt="mark"></p><a id="more"></a> <h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p><img src="http://q2fz8l8jw.bkt.clouddn.com/blog/20191216/jhIm0HhcKYbY.png?imageslim" alt="mark"></p><ol><li>队列是一个有序列表，可以用<strong>数组</strong>或是<strong>链表</strong>来实现。</li><li>遵循<strong>先入先出</strong>的原则。即：先存入队列的数据，要先取出。后存入的要后取出</li></ol><h2 id="数组模拟队列"><a href="#数组模拟队列" class="headerlink" title="数组模拟队列"></a>数组模拟队列</h2><p>使用数组模拟队列的方法需要两个变量front、rear分别记录队列前后端的下标，front 会随着数据输出而改变，而 rear则是随着数据输入而改变。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">front = -<span class="number">1</span>; <span class="comment">// 指向队列头部，分析出front是指向队列头的前一个位置.</span></span><br><span class="line">rear = -<span class="number">1</span>; <span class="comment">// 指向队列尾，指向队列尾的数据(即就是队列最后一个数据)</span></span><br></pre></td></tr></table></figure><p>利用这两个变量可以进行<strong>队列空</strong>、<strong>队列满</strong>、<strong>数据入队列</strong>、<strong>数据出队列</strong>的判断。</p><p>具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用数组模拟队列-编写一个ArrayQueue类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayQueue</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxSize; <span class="comment">// 表示数组的最大容量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> front; <span class="comment">// 队列头</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> rear; <span class="comment">// 队列尾</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] arr; <span class="comment">// 该数据用于存放数据, 模拟队列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建队列的构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayQueue</span><span class="params">(<span class="keyword">int</span> arrMaxSize)</span> </span>&#123;</span><br><span class="line">maxSize = arrMaxSize;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="keyword">int</span>[maxSize];</span><br><span class="line">front = -<span class="number">1</span>; <span class="comment">// 指向队列头部，分析出front是指向队列头的前一个位置.</span></span><br><span class="line">rear = -<span class="number">1</span>; <span class="comment">// 指向队列尾，指向队列尾的数据(即就是队列最后一个数据)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断队列是否满</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> rear == maxSize - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断队列是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> rear == front;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加数据到队列</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addQueue</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 判断队列是否满</span></span><br><span class="line"><span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">System.out.println(<span class="string">"队列满，不能加入数据~"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">rear++; <span class="comment">// 让rear 后移</span></span><br><span class="line">arr[rear] = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取队列的数据, 出队列</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 判断队列是否空</span></span><br><span class="line"><span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line"><span class="comment">// 通过抛出异常</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列空，不能取数据"</span>);</span><br><span class="line">&#125;</span><br><span class="line">front++; <span class="comment">// front后移</span></span><br><span class="line"><span class="keyword">return</span> arr[front];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示队列的所有数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">System.out.println(<span class="string">"队列空的，没有数据~~"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.printf(<span class="string">"arr[%d]=%d\n"</span>, i, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示队列的头数据， 注意不是取出数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">headQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 判断</span></span><br><span class="line"><span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列空的，没有数据~~"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr[front + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组模拟环形队列"><a href="#数组模拟环形队列" class="headerlink" title="数组模拟环形队列"></a>数组模拟环形队列</h2><p>对于上面方式创建的数组队列，有一个非常致命的问题，队列无法循环使用，为了解决这个问题我们引入取模操作，利用数组模拟一个环形队列，使得队列能够一直使用。</p><p><img src="http://q2fz8l8jw.bkt.clouddn.com/blog/20191216/t221VHd7yIl6.png?imageslim" alt="mark"></p><p>如上图分析所示，变量front和rear需要做一个变化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//front 变量的含义做一个调整： front 就指向队列的第一个元素, 也就是说 arr[front] 就是队列的第一个元素 </span></span><br><span class="line"><span class="comment">//front 的初始值 = 0</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> front; </span><br><span class="line"><span class="comment">//rear 变量的含义做一个调整：rear 指向队列的最后一个元素的后一个位置. 因为希望空出一个空间做为约定.</span></span><br><span class="line"><span class="comment">//rear 的初始值 = 0</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> rear; <span class="comment">// 队列尾</span></span><br></pre></td></tr></table></figure><p>建立循环队列的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircleArray</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxSize; <span class="comment">// 表示数组的最大容量</span></span><br><span class="line"><span class="comment">//front 变量的含义做一个调整： front 就指向队列的第一个元素, 也就是说 arr[front] 就是队列的第一个元素 </span></span><br><span class="line"><span class="comment">//front 的初始值 = 0</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> front; </span><br><span class="line"><span class="comment">//rear 变量的含义做一个调整：rear 指向队列的最后一个元素的后一个位置. 因为希望空出一个空间做为约定.</span></span><br><span class="line"><span class="comment">//rear 的初始值 = 0</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> rear; <span class="comment">// 队列尾</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] arr; <span class="comment">// 该数据用于存放数据, 模拟队列</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CircleArray</span><span class="params">(<span class="keyword">int</span> arrMaxSize)</span> </span>&#123;</span><br><span class="line">maxSize = arrMaxSize;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="keyword">int</span>[maxSize];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断队列是否满</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (rear  + <span class="number">1</span>) % maxSize == front;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断队列是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> rear == front;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加数据到队列</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addQueue</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 判断队列是否满</span></span><br><span class="line"><span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">System.out.println(<span class="string">"队列满，不能加入数据~"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//直接将数据加入</span></span><br><span class="line">arr[rear] = n;</span><br><span class="line"><span class="comment">//将 rear 后移, 这里必须考虑取模</span></span><br><span class="line">rear = (rear + <span class="number">1</span>) % maxSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取队列的数据, 出队列</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 判断队列是否空</span></span><br><span class="line"><span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line"><span class="comment">// 通过抛出异常</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列空，不能取数据"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里需要分析出 front是指向队列的第一个元素</span></span><br><span class="line"><span class="comment">// 1. 先把 front 对应的值保留到一个临时变量</span></span><br><span class="line"><span class="comment">// 2. 将 front 后移, 考虑取模</span></span><br><span class="line"><span class="comment">// 3. 将临时保存的变量返回</span></span><br><span class="line"><span class="keyword">int</span> value = arr[front];</span><br><span class="line">front = (front + <span class="number">1</span>) % maxSize;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示队列的所有数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">System.out.println(<span class="string">"队列空的，没有数据~~"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 思路：从front开始遍历，遍历多少个元素</span></span><br><span class="line"><span class="comment">// 动脑筋</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = front; i &lt; front + size() ; i++) &#123;</span><br><span class="line">System.out.printf(<span class="string">"arr[%d]=%d\n"</span>, i % maxSize, arr[i % maxSize]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求出当前队列有效数据的个数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// rear = 2</span></span><br><span class="line"><span class="comment">// front = 1</span></span><br><span class="line"><span class="comment">// maxSize = 3 </span></span><br><span class="line"><span class="keyword">return</span> (rear + maxSize - front) % maxSize;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示队列的头数据， 注意不是取出数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">headQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 判断</span></span><br><span class="line"><span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列空的，没有数据~~"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr[front];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://q2fz8l8jw.bkt.clouddn.com/blog/20191217/QraeaDA9hLep.jpg?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java数据结构和算法——稀疏矩阵</title>
    <link href="http://yoursite.com/2019/12/05/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5/"/>
    <id>http://yoursite.com/2019/12/05/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5/</id>
    <published>2019-12-05T08:34:07.080Z</published>
    <updated>2019-12-16T12:43:23.207Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://q2fz8l8jw.bkt.clouddn.com/blog/20191216/Q8uEsQH3g5hV.jpg?imageslim" alt="mark"></p><a id="more"></a> <h2 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h2><p><img src="http://q2fz8l8jw.bkt.clouddn.com/blog/20191216/c57v4gQbgVoF.png?imageslim" alt="mark"></p><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>当一个数组中大部分元素为０，或者为同一个值的数组时，可以使用稀疏数组来保存该数组。</p><p>稀疏数组的处理方法是:</p><ol><li><p>记录数组一共有几行几列，有多少个不同的值</p></li><li><p>把具有不同值的元素的行列及值记录在一个小规模的数组中，从而缩小程序的规模</p></li></ol><h3 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h3><p>使用稀疏数组，来保留类似前面的二维数组(棋盘、地图等等)<br>把稀疏数组存盘，并且可以从新恢复原来的二维数组数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SparseArray</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建一个原始的二维数组 11 * 11</span></span><br><span class="line"><span class="comment">// 0: 表示没有棋子， 1 表示 黑子 2 表蓝子</span></span><br><span class="line"><span class="keyword">int</span> chessArr1[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">chessArr1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">chessArr1[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">chessArr1[<span class="number">4</span>][<span class="number">5</span>] = <span class="number">2</span>;</span><br><span class="line">chessArr1[<span class="number">6</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 输出原始的二维数组</span></span><br><span class="line">System.out.println(<span class="string">"原始的二维数组~~"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span>[] row : chessArr1) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> data : row) &#123;</span><br><span class="line">System.out.printf(<span class="string">"%d\t"</span>, data);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将二维数组 转 稀疏数组的思</span></span><br><span class="line"><span class="comment">// 1. 先遍历二维数组 得到非0数据的个数</span></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">11</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (chessArr1[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">sum++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建对应的稀疏数组</span></span><br><span class="line"><span class="keyword">int</span> sparseArr[][] = <span class="keyword">new</span> <span class="keyword">int</span>[sum + <span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line"><span class="comment">// 给稀疏数组赋值</span></span><br><span class="line">sparseArr[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">sparseArr[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">11</span>;</span><br><span class="line">sparseArr[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历二维数组，将非0的值存放到 sparseArr中</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>; <span class="comment">//count 用于记录是第几个非0数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">11</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (chessArr1[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">count++;</span><br><span class="line">sparseArr[count][<span class="number">0</span>] = i;</span><br><span class="line">sparseArr[count][<span class="number">1</span>] = j;</span><br><span class="line">sparseArr[count][<span class="number">2</span>] = chessArr1[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出稀疏数组的形式</span></span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">"得到稀疏数组为~~~~"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sparseArr.length; i++) &#123;</span><br><span class="line">System.out.printf(<span class="string">"%d\t%d\t%d\t\n"</span>, sparseArr[i][<span class="number">0</span>], sparseArr[i][<span class="number">1</span>], sparseArr[i][<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">//将稀疏数组 --》 恢复成 原始的二维数组</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  1. 先读取稀疏数组的第一行，根据第一行的数据，创建原始的二维数组，比如上面的  chessArr2 = int [11][11]</span></span><br><span class="line"><span class="comment">2. 在读取稀疏数组后几行的数据，并赋给 原始的二维数组 即可.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 先读取稀疏数组的第一行，根据第一行的数据，创建原始的二维数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> chessArr2[][] = <span class="keyword">new</span> <span class="keyword">int</span>[sparseArr[<span class="number">0</span>][<span class="number">0</span>]][sparseArr[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 在读取稀疏数组后几行的数据(从第二行开始)，并赋给 原始的二维数组 即可</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; sparseArr.length; i++) &#123;</span><br><span class="line">chessArr2[sparseArr[i][<span class="number">0</span>]][sparseArr[i][<span class="number">1</span>]] = sparseArr[i][<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出恢复后的二维数组</span></span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">"恢复后的二维数组"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span>[] row : chessArr2) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> data : row) &#123;</span><br><span class="line">System.out.printf(<span class="string">"%d\t"</span>, data);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><p><img src="/2019/12/05/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5/image-20191205193140618.png" alt="image-20191205193140618.png"></p><h3 id="习题要求"><a href="#习题要求" class="headerlink" title="习题要求"></a>习题要求</h3><ol><li>在前面的基础上，将稀疏数组保存到磁盘上，比如 map.data</li><li>恢复原来的数组时，读取map.data 进行恢复</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.sparsearray;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.print.DocFlavor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SparseArray</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 创建一个原始的二维数组 11 * 11</span></span><br><span class="line"><span class="comment">// 0: 表示没有棋子， 1 表示 黑子 2 表蓝子</span></span><br><span class="line"><span class="keyword">int</span> chessArr1[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">chessArr1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">chessArr1[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">chessArr1[<span class="number">4</span>][<span class="number">5</span>] = <span class="number">2</span>;</span><br><span class="line">chessArr1[<span class="number">6</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 输出原始的二维数组</span></span><br><span class="line">System.out.println(<span class="string">"原始的二维数组~~"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span>[] row : chessArr1) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> data : row) &#123;</span><br><span class="line">System.out.printf(<span class="string">"%d\t"</span>, data);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将二维数组 转 稀疏数组的思</span></span><br><span class="line"><span class="comment">// 1. 先遍历二维数组 得到非0数据的个数</span></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">11</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (chessArr1[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">sum++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建对应的稀疏数组</span></span><br><span class="line"><span class="keyword">int</span> sparseArr[][] = <span class="keyword">new</span> <span class="keyword">int</span>[sum + <span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line"><span class="comment">// 给稀疏数组赋值</span></span><br><span class="line">sparseArr[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">sparseArr[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">11</span>;</span><br><span class="line">sparseArr[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历二维数组，将非0的值存放到 sparseArr中</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>; <span class="comment">//count 用于记录是第几个非0数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">11</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (chessArr1[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">count++;</span><br><span class="line">sparseArr[count][<span class="number">0</span>] = i;</span><br><span class="line">sparseArr[count][<span class="number">1</span>] = j;</span><br><span class="line">sparseArr[count][<span class="number">2</span>] = chessArr1[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将稀疏矩阵保存到磁盘上</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出稀疏数组的形式</span></span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">"得到稀疏数组为~~~~"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sparseArr.length; i++) &#123;</span><br><span class="line">System.out.printf(<span class="string">"%d\t%d\t%d\t\n"</span>, sparseArr[i][<span class="number">0</span>], sparseArr[i][<span class="number">1</span>], sparseArr[i][<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将稀疏数组存储到文件map.data中</span></span><br><span class="line">        saveData(sparseArr);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="comment">//从map.data文件中读取稀疏数组</span></span><br><span class="line">        <span class="keyword">int</span>[][] sparseArr1 =getData();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//将稀疏数组 --》 恢复成 原始的二维数组</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  1. 先读取稀疏数组的第一行，根据第一行的数据，创建原始的二维数组，比如上面的  chessArr2 = int [11][11]</span></span><br><span class="line"><span class="comment">2. 在读取稀疏数组后几行的数据，并赋给 原始的二维数组 即可.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 先读取稀疏数组的第一行，根据第一行的数据，创建原始的二维数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> chessArr2[][] = <span class="keyword">new</span> <span class="keyword">int</span>[sparseArr1[<span class="number">0</span>][<span class="number">0</span>]][sparseArr1[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 在读取稀疏数组后几行的数据(从第二行开始)，并赋给 原始的二维数组 即可</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; sparseArr1.length; i++) &#123;</span><br><span class="line">chessArr2[sparseArr1[i][<span class="number">0</span>]][sparseArr1[i][<span class="number">1</span>]] = sparseArr1[i][<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出恢复后的二维数组</span></span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">"恢复后的二维数组"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span>[] row : chessArr2) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> data : row) &#123;</span><br><span class="line">System.out.printf(<span class="string">"%d\t"</span>, data);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">saveData</span><span class="params">(<span class="keyword">int</span>[][] arr)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        </span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"I:\\eclipse-workspace\\DataStructures\\map.data"</span>);</span><br><span class="line">        PrintWriter pw = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> FileWriter(file));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i &lt; arr.length; i++)&#123;</span><br><span class="line">            pw.println(arr[i][<span class="number">0</span>]+<span class="string">","</span>+arr[i][<span class="number">1</span>]+<span class="string">","</span>+arr[i][<span class="number">2</span>]);</span><br><span class="line">            pw.flush();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] getData()<span class="keyword">throws</span> IOException&#123;</span><br><span class="line"> </span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"I:\\eclipse-workspace\\DataStructures\\map.data"</span>);</span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(fr);</span><br><span class="line">        String len=br.readLine();</span><br><span class="line">        String[] str = len.split(<span class="string">","</span>);</span><br><span class="line">        <span class="keyword">int</span>[][] ch = <span class="keyword">new</span>  <span class="keyword">int</span>[Integer.parseInt(str[<span class="number">2</span>])+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        ch[<span class="number">0</span>][<span class="number">0</span>] = Integer.parseInt(str[<span class="number">0</span>]);</span><br><span class="line">        ch[<span class="number">0</span>][<span class="number">1</span>] = Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line">        ch[<span class="number">0</span>][<span class="number">2</span>] = Integer.parseInt(str[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>((len=br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ;i &lt; <span class="number">3</span>;i++)&#123;</span><br><span class="line">                String[] str2 = len.split(<span class="string">","</span>);</span><br><span class="line">                ch[temp][i] = Integer.parseInt(str2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            temp++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ch;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果：</strong></p><p><img src="/2019/12/05/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5/image-20191205193101382.png" alt="image-20191205193101382"></p><p><img src="/2019/12/05/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5/image-20191205193155714.png" alt="image-20191205193140618"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://q2fz8l8jw.bkt.clouddn.com/blog/20191216/Q8uEsQH3g5hV.jpg?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java数据结构与算法——排序</title>
    <link href="http://yoursite.com/2019/11/27/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2019/11/27/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E6%8E%92%E5%BA%8F/</id>
    <published>2019-11-27T08:32:43.599Z</published>
    <updated>2019-12-16T12:29:00.994Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://q2fz8l8jw.bkt.clouddn.com/blog/20191216/H8299vPG1R1R.jpg?imageslim" alt="mark"></p><a id="more"></a> <h1 id="初级排序"><a href="#初级排序" class="headerlink" title="初级排序"></a>初级排序</h1><p>《算法（第四版）》 第二章第一节 本章主要内容是选择排序、插入排序以及shell排序。</p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>不断选择剩余元素中的最小者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Selection</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span> <span class="params">(Comparable[] a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = a.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> min = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>;  j &lt; N; j++)</span><br><span class="line">                <span class="keyword">if</span>(less(a[j], a[min]))min = j;</span><br><span class="line">            exch(a, i, min); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度O(n^2)</p><p>运行时间与输入无关，有序数组同样需要等长时间。</p><p>数据的移动是最少的，N次交换——交换次数与数组长度是线性关系。</p><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>每次都把当前值放入该值前面部分</p><p>插入排序时间取决于输入中元素的初始顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Insertion</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = a.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span> &amp;&amp; less(a[j],a[j-<span class="number">1</span>]); j--)</span><br><span class="line">                exch(a, j, j-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>使数组中任意间隔为h的元素都是有序的。</p><p>通过提升速度来解决其他方式无法解决的问题是研究算法的设计和性能的主要原因之一。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//Shell排序算法</span></span><br><span class="line"><span class="keyword">int</span> N = a.length;</span><br><span class="line"><span class="keyword">int</span> h = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(h &lt; N/<span class="number">3</span>) h = <span class="number">3</span>*h + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(h &gt;= <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt;= h &amp;&amp; less(a[j],a[j-h]); j -= h)</span><br><span class="line">               exch(a, j, j-h);</span><br><span class="line">&#125;</span><br><span class="line">h = h/<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p>归并：将两个有序的数组归并成一个更大的有序数组。</p><p>优点：任意长度为N的数组排序所需时间和NlogN成正比</p><p>缺点：所需的额外空间和N成正比</p><h2 id="原地归并的抽象方法"><a href="#原地归并的抽象方法" class="headerlink" title="原地归并的抽象方法"></a>原地归并的抽象方法</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://q2fz8l8jw.bkt.clouddn.com/blog/20191216/H8299vPG1R1R.jpg?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>java基础知识——继承与多态</title>
    <link href="http://yoursite.com/2019/11/27/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E2%80%94%E2%80%94%E7%BB%A7%E6%89%BF%E4%B8%8E%E5%A4%9A%E6%80%81/"/>
    <id>http://yoursite.com/2019/11/27/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E2%80%94%E2%80%94%E7%BB%A7%E6%89%BF%E4%B8%8E%E5%A4%9A%E6%80%81/</id>
    <published>2019-11-27T08:32:43.592Z</published>
    <updated>2019-12-17T06:06:44.188Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://q2fz8l8jw.bkt.clouddn.com/blog/20191216/adLGkvzIH0c5.jpg?imageslim" alt="mark"><br> <a id="more"></a> </p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>《Java核心技术 卷I》第五章 本章主要内容是Java中继承的相关知识。</p><h2 id="类、超类和子类"><a href="#类、超类和子类" class="headerlink" title="类、超类和子类"></a>类、超类和子类</h2><p>“is-a”关系是继承的一个明显特征</p><h3 id="定义子类"><a href="#定义子类" class="headerlink" title="定义子类"></a>定义子类</h3><p>关键字extends表示继承</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//添加方法和域</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>已存在的类：父类、超类或基类</p><p>新类：子类、派生类或孩子类</p><p>子类比超类拥有的功能更加丰富，封装了更多数据、拥有更多功能。</p><h3 id="覆盖方法"><a href="#覆盖方法" class="headerlink" title="覆盖方法"></a>覆盖方法</h3><p>子类不能直接访问超类的私有域</p><p>super.方法 指示编译器调用超类的方法的特殊关键字</p><h3 id="子类构造器"><a href="#子类构造器" class="headerlink" title="子类构造器"></a>子类构造器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">(String name, <span class="keyword">double</span> salary, <span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(name, salary, year, month, day);<span class="comment">//调用超类中含有name, salary, year, month, day参数的构造器</span></span><br><span class="line">    bonus = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>manage类不能访问employee类的私有域</p><p>使用super实现对超类构造器的调用，super必须是子类构造器的第一条语句</p><p>多态：一个变量对象可以指示多种实际类型的现象被称为<strong>多态</strong>，在运行时能够自动的选择调用哪个方法的现象称为<strong>动态绑定</strong>。</p><h3 id="继承层次"><a href="#继承层次" class="headerlink" title="继承层次"></a>继承层次</h3><p>由一个公共超类派生出来的所有类的集合</p><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>程序中出现超类对象对任何地方都可以引用子类对象置换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Employee e;</span><br><span class="line">e = <span class="keyword">new</span> Employee(...);<span class="comment">//</span></span><br><span class="line">e = <span class="keyword">new</span> Manger(...);<span class="comment">//</span></span><br></pre></td></tr></table></figure><p>在Java程序设计语言中，对象变量是<strong>多态</strong>的。一个Employee变量既可以引用一个Employee类对象，也可以引用一个Employee类对任何一个子类的对象。</p><ol><li>理解多态性：可以理解为一个事物的多种形态。</li><li>何为多态性：对象的多态性：父类的引用指向子类的对象（或子类的对象赋给父类的引用）</li><li>多态的使用：虚拟方法调用 有了对象的多态性以后，我们在编译期，只能调用父类中声明的方法，但在运行期，我们实际执行的是子类重写父类的方法。</li><li>多态性的使用前提：  ① 类的继承关系  ② 方法的重写</li><li>对象的多态性，只适用于方法，不适用于属性（编译和运行都看左边）</li></ol><h3 id="instanceof-关键字"><a href="#instanceof-关键字" class="headerlink" title="instanceof 关键字"></a>instanceof 关键字</h3><p>有了对象的多态性以后，内存中实际上是加载了子类特有的属性和方法的，但是由于变量声明为父类类型，导致编译时，只能调用父类中声明的属性和方法。子类特有的属性和方法不能调用。</p><p><strong>如何才能调用子类特有的属性和方法？</strong></p><p>答：向下转型：使用强制类型转换符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Man m1 = (Man)p2;</span><br></pre></td></tr></table></figure><p><img src="http://q2fz8l8jw.bkt.clouddn.com/blog/20191217/oQ9iChTS5NSU.png?imageslim" alt="mark"></p><p>使用强转时，可能出现ClassCastException的异常，故引入instanceof关键字。</p><p><strong>instanceof关键字的使用</strong>：a instanceof A:判断对象a是否是类A的实例。如果是，返回true；如果不是，返回false。</p><blockquote><p>使用情境：为了避免在向下转型时出现ClassCastException的异常，我们在向下转型之前，先进行instanceof的判断，一旦返回true，就进行向下转型。如果返回false，不进行向下转型。<br>如果 a instanceof A返回true,则 a instanceof B也返回true。其中，类B是类A的父类。</p></blockquote><p>需要注意的几个问题：</p><p>问题一：编译时通过，运行时不通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person p3 = <span class="keyword">new</span> Woman();</span><br><span class="line">Man m3 = (Man)p3;</span><br></pre></td></tr></table></figure><p>问题二：编译通过，运行时也通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Woman();</span><br><span class="line">Person p = (Person)obj;</span><br></pre></td></tr></table></figure><p>问题三：编译不通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Man m5 = <span class="keyword">new</span> Woman();</span><br><span class="line">String str = <span class="keyword">new</span> Date();</span><br></pre></td></tr></table></figure><p>子类继承父类</p><ul><li>若子类重写了父类方法，就意味着子类里定义的方法彻底覆盖了父类里的 同名方法，系统将不可能把父类里的方法转移到子类中。</li><li>对于实例变量则不存在这样的现象，即使子类里定义了与父类完全相同的 实例变量，这个实例变量依然不可能覆盖父类中定义的实例变量。</li></ul><h3 id="Object类结构分析"><a href="#Object类结构分析" class="headerlink" title="Object类结构分析"></a>Object类结构分析</h3><ol><li><p>Object类是所有Java类的根父类</p></li><li><p>如果在类的声明中未使用extends关键字指明其父类，则默认父类为java.lang.Object类 </p></li><li><p>Object类中的功能(属性、方法)就具有通用性。</p><p>属性：无</p><p>方法：equals() / toString() / getClass() /hashCode() / clone() / finalize()/wait() 、notify()、notifyAll()</p></li><li><p>Object类只声明了一个空参的构造器</p></li></ol><p><strong>equals()</strong></p><ol><li><p>回顾 == 的使用</p><ul><li><p>可以使用在基本数据类型变量和引用数据类型变量中</p></li><li><p>如果比较的是基本数据类型变量：比较两个变量保存的数据是否相等。（不一定类型要相同）</p></li><li><p>如果比较的是引用数据类型变量：比较两个对象的地址值是否相同.即两个引用是否指向同一个对象实体</p></li><li><p>== 符号使用时，必须保证符号左右两边的变量类型一致</p></li></ul></li><li><p>equals()方法的使用</p><ul><li><p>是一个方法，而非运算符</p></li><li><p>只能适用于引用数据类型</p></li><li><p>Object类中equals()的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//Object类中定义的equals()和==的作用是相同的：比较两个对象的地址值是否相同.即两个引用是否指向同一个对象实体</span></span><br></pre></td></tr></table></figure></li><li><p>像String、Date、File、包装类等都重写了Object类中的equals()方法。重写以后，比较的不是两个引用的地址是否相同，而是比较两个对象的”实体内容”是否相同。</p></li><li><p>通常情况下，我们自定义的类如果使用equals()的话，也通常是比较两个对象的”实体内容”是否相同。那么，我们就需要对Object类中的equals()进行重写。</p></li></ul></li><li><p>重写equals()方法的原则</p><ul><li><p>对称性：如果x.equals(y)返回是“true” ，那么y.equals(x)也应该返回是 “true”。</p></li><li><p>自反性：x.equals(x)必须返回是“true”。</p></li><li><p>传递性：如果x.equals(y)返回是“true” ，而且y.equals(z)返回是“true” ， 那么z.equals(x)也应该返回是“true”。</p></li><li><p>一致性：如果x.equals(y)返回是“true” ，只要x和y内容一直不变，不管你 重复x.equals(y)多少次，返回都是“true”。</p></li><li><p>任何情况下，x.equals(null)，永远返回是“false” ；</p><p> x.equals(和x不同类型的对象)永远返回是“false”。</p></li></ul></li></ol><p><strong>toString()</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://q2fz8l8jw.bkt.clouddn.com/blog/20191216/adLGkvzIH0c5.jpg?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>java基础知识——对象和类</title>
    <link href="http://yoursite.com/2019/11/27/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E2%80%94%E2%80%94%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%B1%BB/"/>
    <id>http://yoursite.com/2019/11/27/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E2%80%94%E2%80%94%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%B1%BB/</id>
    <published>2019-11-27T08:32:43.585Z</published>
    <updated>2019-12-16T12:29:55.654Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://q2fz8l8jw.bkt.clouddn.com/blog/20191216/XxQail85b7FQ.jpg?imageslim" alt="mark"> </p><a id="more"></a> <h1 id="对象和类"><a href="#对象和类" class="headerlink" title="对象和类"></a>对象和类</h1><p>《Java核心技术 卷I》第四章 本章主要内容是Java中对象和类的知识。</p><h2 id="静态与与静态方法"><a href="#静态与与静态方法" class="headerlink" title="静态与与静态方法"></a>静态与与静态方法</h2><h3 id="静态域"><a href="#静态域" class="headerlink" title="静态域"></a>静态域</h3><p>每个类中只有一个这样的域。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> nextId = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>静态域属于类，不属于任何独立的对象。静态域其实是类域。</p><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>静态方法不能向对象实施操作，没有隐式的参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Math.pow(x,a)</span><br></pre></td></tr></table></figure><p>静态方法不能访问实例域，不能操作对象，但是可以访问静态域。</p><p>建议通过类对象的引用来调用方法。</p><h3 id="静态常量"><a href="#静态常量" class="headerlink" title="静态常量"></a>静态常量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pulic <span class="class"><span class="keyword">class</span> <span class="title">Math</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.1416926</span>;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main方法"><a href="#main方法" class="headerlink" title="main方法"></a>main方法</h3><p>不需要使用对象调用静态方法。</p><h2 id="方法参数"><a href="#方法参数" class="headerlink" title="方法参数"></a>方法参数</h2><ul><li>Java程序设计语言总是采用按值调用</li><li>方法得到的所有参数值都是拷贝</li><li>方法不能修改传递给它的任何参数变量的内容</li></ul><p>对于对象引用作为参数，对象引用以及其他的拷贝同时引用同一个对象，对象引用是按值传递的。</p><p>总结Java中方法参数的使用情况</p><ul><li>一个方法不能修改一个基本数据类型的参数（数值型或布尔型）</li><li>一个方法可以改变一个对象参数的状态</li><li>一个方法不能让对象参数引用一个新的对象</li></ul><h2 id="对象构造"><a href="#对象构造" class="headerlink" title="对象构造"></a>对象构造</h2><h3 id="重载-overloading"><a href="#重载-overloading" class="headerlink" title="重载(overloading)"></a>重载(overloading)</h3><p>多个方法有相同的名字，不同的参数。</p><p>重载解析：编译器用各个方法给出的参数类型与特定方法调用所使用的值类型进行匹配来挑选出相应的方法，如果找不到，就会产生编译错误。</p><h3 id="默认域初始化"><a href="#默认域初始化" class="headerlink" title="默认域初始化"></a>默认域初始化</h3><p>如果不显式的给域赋初值，自动的赋为默认值，数值为0，布尔值为false，对象引用为null。</p><h3 id="无参数构造器"><a href="#无参数构造器" class="headerlink" title="无参数构造器"></a>无参数构造器</h3><p>编写类没有编写构造函数——》系统提供无参数构造函数</p><p>类中有构造器，但是无无参数构造函数——》构造对象时不提供参数被视为不合法</p><h3 id="调用另一个构造器"><a href="#调用另一个构造器" class="headerlink" title="调用另一个构造器"></a>调用另一个构造器</h3><p>关键词this引用方法的隐式参数</p><p>构造器中使用this(…)表示，构造器将调用同一个类的另一个构造器，可以用于对公共部分的构造器代码的简化。</p><h3 id="初始化块"><a href="#初始化块" class="headerlink" title="初始化块"></a>初始化块</h3><ul><li>在构造域中设置值</li><li>在声明中赋值</li><li>在初始化块中被初始化</li></ul><p>只要构造类对象，初始化块就被执行，先运行初始化块，再运行构造器的主体部分。</p><p>下面是调用构造器的具体处理步骤</p><ol><li>所有数据域被初始化为默认值（0、false、或者null）</li><li>按照在类的声明中出现的次序，依次执行所有域的初始化语句和初始化块</li><li>如果构造器第一行调用了第二个构造器，则执行第二个构造器主体</li><li>执行这个构造器的主体</li></ol><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>使用包可以确保类名的唯一性。</p><p>从编译的角度看，嵌套的包之间没有任何关系。</p><h3 id="类的导入"><a href="#类的导入" class="headerlink" title="类的导入"></a>类的导入</h3><p>使用import语句导入一个特定的类或者整个包。</p><p>或者在每个类名之前添加完整包名。</p><h3 id="静态导入"><a href="#静态导入" class="headerlink" title="静态导入"></a>静态导入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.System.*;</span><br></pre></td></tr></table></figure><p>就可以使用System类的静态方法和静态域，不必加类名前缀。</p><h3 id="将类放入包中"><a href="#将类放入包中" class="headerlink" title="将类放入包中"></a>将类放入包中</h3><p>将包的名字放在源文件的开头，包中定义类的代码之前。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horstman.corejava</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果没有package语句，那么类被放置在默认包(default package)中。</p><h2 id="类路径"><a href="#类路径" class="headerlink" title="类路径"></a>类路径</h2><p>类存储在文件系统子目录中，类的路径必须与包名匹配。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://q2fz8l8jw.bkt.clouddn.com/blog/20191216/XxQail85b7FQ.jpg?imageslim&quot; alt=&quot;mark&quot;&gt; &lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
